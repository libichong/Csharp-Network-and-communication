//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace MyOutlook {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class DataSetMailAccounts : DataSet {
        
        private MailAccountsDataTable tableMailAccounts;
        
        public DataSetMailAccounts() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected DataSetMailAccounts(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["MailAccounts"] != null)) {
                    this.Tables.Add(new MailAccountsDataTable(ds.Tables["MailAccounts"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MailAccountsDataTable MailAccounts {
            get {
                return this.tableMailAccounts;
            }
        }
        
        public override DataSet Clone() {
            DataSetMailAccounts cln = ((DataSetMailAccounts)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["MailAccounts"] != null)) {
                this.Tables.Add(new MailAccountsDataTable(ds.Tables["MailAccounts"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableMailAccounts = ((MailAccountsDataTable)(this.Tables["MailAccounts"]));
            if ((this.tableMailAccounts != null)) {
                this.tableMailAccounts.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "DataSetMailAccounts";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/DataSetMailAccounts.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableMailAccounts = new MailAccountsDataTable();
            this.Tables.Add(this.tableMailAccounts);
        }
        
        private bool ShouldSerializeMailAccounts() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void MailAccountsRowChangeEventHandler(object sender, MailAccountsRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class MailAccountsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnAccount;
            
            private DataColumn columnIncomingMailServer;
            
            private DataColumn columnInPassword;
            
            private DataColumn columnInPort;
            
            private DataColumn columnInUserID;
            
            private DataColumn columnIsLeaveMessage;
            
            private DataColumn columnIsOutgoingAuthorized;
            
            private DataColumn columnIsTheSameWithIncoming;
            
            private DataColumn columnMailAccountID;
            
            private DataColumn columnOutgoingMailServer;
            
            private DataColumn columnOutPassword;
            
            private DataColumn columnOutPort;
            
            private DataColumn columnOutUserID;
            
            private DataColumn columnServerType;
            
            private DataColumn columnType;
            
            internal MailAccountsDataTable() : 
                    base("MailAccounts") {
                this.InitClass();
            }
            
            internal MailAccountsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn AccountColumn {
                get {
                    return this.columnAccount;
                }
            }
            
            internal DataColumn IncomingMailServerColumn {
                get {
                    return this.columnIncomingMailServer;
                }
            }
            
            internal DataColumn InPasswordColumn {
                get {
                    return this.columnInPassword;
                }
            }
            
            internal DataColumn InPortColumn {
                get {
                    return this.columnInPort;
                }
            }
            
            internal DataColumn InUserIDColumn {
                get {
                    return this.columnInUserID;
                }
            }
            
            internal DataColumn IsLeaveMessageColumn {
                get {
                    return this.columnIsLeaveMessage;
                }
            }
            
            internal DataColumn IsOutgoingAuthorizedColumn {
                get {
                    return this.columnIsOutgoingAuthorized;
                }
            }
            
            internal DataColumn IsTheSameWithIncomingColumn {
                get {
                    return this.columnIsTheSameWithIncoming;
                }
            }
            
            internal DataColumn MailAccountIDColumn {
                get {
                    return this.columnMailAccountID;
                }
            }
            
            internal DataColumn OutgoingMailServerColumn {
                get {
                    return this.columnOutgoingMailServer;
                }
            }
            
            internal DataColumn OutPasswordColumn {
                get {
                    return this.columnOutPassword;
                }
            }
            
            internal DataColumn OutPortColumn {
                get {
                    return this.columnOutPort;
                }
            }
            
            internal DataColumn OutUserIDColumn {
                get {
                    return this.columnOutUserID;
                }
            }
            
            internal DataColumn ServerTypeColumn {
                get {
                    return this.columnServerType;
                }
            }
            
            internal DataColumn TypeColumn {
                get {
                    return this.columnType;
                }
            }
            
            public MailAccountsRow this[int index] {
                get {
                    return ((MailAccountsRow)(this.Rows[index]));
                }
            }
            
            public event MailAccountsRowChangeEventHandler MailAccountsRowChanged;
            
            public event MailAccountsRowChangeEventHandler MailAccountsRowChanging;
            
            public event MailAccountsRowChangeEventHandler MailAccountsRowDeleted;
            
            public event MailAccountsRowChangeEventHandler MailAccountsRowDeleting;
            
            public void AddMailAccountsRow(MailAccountsRow row) {
                this.Rows.Add(row);
            }
            
            public MailAccountsRow AddMailAccountsRow(string Account, string IncomingMailServer, string InPassword, short InPort, string InUserID, bool IsLeaveMessage, bool IsOutgoingAuthorized, bool IsTheSameWithIncoming, string OutgoingMailServer, string OutPassword, short OutPort, string OutUserID, string ServerType, string Type) {
                MailAccountsRow rowMailAccountsRow = ((MailAccountsRow)(this.NewRow()));
                rowMailAccountsRow.ItemArray = new object[] {
                        Account,
                        IncomingMailServer,
                        InPassword,
                        InPort,
                        InUserID,
                        IsLeaveMessage,
                        IsOutgoingAuthorized,
                        IsTheSameWithIncoming,
                        null,
                        OutgoingMailServer,
                        OutPassword,
                        OutPort,
                        OutUserID,
                        ServerType,
                        Type};
                this.Rows.Add(rowMailAccountsRow);
                return rowMailAccountsRow;
            }
            
            public MailAccountsRow FindByMailAccountID(int MailAccountID) {
                return ((MailAccountsRow)(this.Rows.Find(new object[] {
                            MailAccountID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                MailAccountsDataTable cln = ((MailAccountsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new MailAccountsDataTable();
            }
            
            internal void InitVars() {
                this.columnAccount = this.Columns["Account"];
                this.columnIncomingMailServer = this.Columns["IncomingMailServer"];
                this.columnInPassword = this.Columns["InPassword"];
                this.columnInPort = this.Columns["InPort"];
                this.columnInUserID = this.Columns["InUserID"];
                this.columnIsLeaveMessage = this.Columns["IsLeaveMessage"];
                this.columnIsOutgoingAuthorized = this.Columns["IsOutgoingAuthorized"];
                this.columnIsTheSameWithIncoming = this.Columns["IsTheSameWithIncoming"];
                this.columnMailAccountID = this.Columns["MailAccountID"];
                this.columnOutgoingMailServer = this.Columns["OutgoingMailServer"];
                this.columnOutPassword = this.Columns["OutPassword"];
                this.columnOutPort = this.Columns["OutPort"];
                this.columnOutUserID = this.Columns["OutUserID"];
                this.columnServerType = this.Columns["ServerType"];
                this.columnType = this.Columns["Type"];
            }
            
            private void InitClass() {
                this.columnAccount = new DataColumn("Account", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAccount);
                this.columnIncomingMailServer = new DataColumn("IncomingMailServer", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIncomingMailServer);
                this.columnInPassword = new DataColumn("InPassword", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnInPassword);
                this.columnInPort = new DataColumn("InPort", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnInPort);
                this.columnInUserID = new DataColumn("InUserID", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnInUserID);
                this.columnIsLeaveMessage = new DataColumn("IsLeaveMessage", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsLeaveMessage);
                this.columnIsOutgoingAuthorized = new DataColumn("IsOutgoingAuthorized", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsOutgoingAuthorized);
                this.columnIsTheSameWithIncoming = new DataColumn("IsTheSameWithIncoming", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsTheSameWithIncoming);
                this.columnMailAccountID = new DataColumn("MailAccountID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMailAccountID);
                this.columnOutgoingMailServer = new DataColumn("OutgoingMailServer", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOutgoingMailServer);
                this.columnOutPassword = new DataColumn("OutPassword", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOutPassword);
                this.columnOutPort = new DataColumn("OutPort", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOutPort);
                this.columnOutUserID = new DataColumn("OutUserID", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOutUserID);
                this.columnServerType = new DataColumn("ServerType", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnServerType);
                this.columnType = new DataColumn("Type", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnType);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnMailAccountID}, true));
                this.columnMailAccountID.AutoIncrement = true;
                this.columnMailAccountID.AllowDBNull = false;
                this.columnMailAccountID.Unique = true;
            }
            
            public MailAccountsRow NewMailAccountsRow() {
                return ((MailAccountsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new MailAccountsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(MailAccountsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MailAccountsRowChanged != null)) {
                    this.MailAccountsRowChanged(this, new MailAccountsRowChangeEvent(((MailAccountsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MailAccountsRowChanging != null)) {
                    this.MailAccountsRowChanging(this, new MailAccountsRowChangeEvent(((MailAccountsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MailAccountsRowDeleted != null)) {
                    this.MailAccountsRowDeleted(this, new MailAccountsRowChangeEvent(((MailAccountsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MailAccountsRowDeleting != null)) {
                    this.MailAccountsRowDeleting(this, new MailAccountsRowChangeEvent(((MailAccountsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveMailAccountsRow(MailAccountsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class MailAccountsRow : DataRow {
            
            private MailAccountsDataTable tableMailAccounts;
            
            internal MailAccountsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableMailAccounts = ((MailAccountsDataTable)(this.Table));
            }
            
            public string Account {
                get {
                    try {
                        return ((string)(this[this.tableMailAccounts.AccountColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableMailAccounts.AccountColumn] = value;
                }
            }
            
            public string IncomingMailServer {
                get {
                    try {
                        return ((string)(this[this.tableMailAccounts.IncomingMailServerColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableMailAccounts.IncomingMailServerColumn] = value;
                }
            }
            
            public string InPassword {
                get {
                    try {
                        return ((string)(this[this.tableMailAccounts.InPasswordColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableMailAccounts.InPasswordColumn] = value;
                }
            }
            
            public short InPort {
                get {
                    try {
                        return ((short)(this[this.tableMailAccounts.InPortColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableMailAccounts.InPortColumn] = value;
                }
            }
            
            public string InUserID {
                get {
                    try {
                        return ((string)(this[this.tableMailAccounts.InUserIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableMailAccounts.InUserIDColumn] = value;
                }
            }
            
            public bool IsLeaveMessage {
                get {
                    try {
                        return ((bool)(this[this.tableMailAccounts.IsLeaveMessageColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableMailAccounts.IsLeaveMessageColumn] = value;
                }
            }
            
            public bool IsOutgoingAuthorized {
                get {
                    try {
                        return ((bool)(this[this.tableMailAccounts.IsOutgoingAuthorizedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableMailAccounts.IsOutgoingAuthorizedColumn] = value;
                }
            }
            
            public bool IsTheSameWithIncoming {
                get {
                    try {
                        return ((bool)(this[this.tableMailAccounts.IsTheSameWithIncomingColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableMailAccounts.IsTheSameWithIncomingColumn] = value;
                }
            }
            
            public int MailAccountID {
                get {
                    return ((int)(this[this.tableMailAccounts.MailAccountIDColumn]));
                }
                set {
                    this[this.tableMailAccounts.MailAccountIDColumn] = value;
                }
            }
            
            public string OutgoingMailServer {
                get {
                    try {
                        return ((string)(this[this.tableMailAccounts.OutgoingMailServerColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableMailAccounts.OutgoingMailServerColumn] = value;
                }
            }
            
            public string OutPassword {
                get {
                    try {
                        return ((string)(this[this.tableMailAccounts.OutPasswordColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableMailAccounts.OutPasswordColumn] = value;
                }
            }
            
            public short OutPort {
                get {
                    try {
                        return ((short)(this[this.tableMailAccounts.OutPortColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableMailAccounts.OutPortColumn] = value;
                }
            }
            
            public string OutUserID {
                get {
                    try {
                        return ((string)(this[this.tableMailAccounts.OutUserIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableMailAccounts.OutUserIDColumn] = value;
                }
            }
            
            public string ServerType {
                get {
                    try {
                        return ((string)(this[this.tableMailAccounts.ServerTypeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableMailAccounts.ServerTypeColumn] = value;
                }
            }
            
            public string Type {
                get {
                    try {
                        return ((string)(this[this.tableMailAccounts.TypeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableMailAccounts.TypeColumn] = value;
                }
            }
            
            public bool IsAccountNull() {
                return this.IsNull(this.tableMailAccounts.AccountColumn);
            }
            
            public void SetAccountNull() {
                this[this.tableMailAccounts.AccountColumn] = System.Convert.DBNull;
            }
            
            public bool IsIncomingMailServerNull() {
                return this.IsNull(this.tableMailAccounts.IncomingMailServerColumn);
            }
            
            public void SetIncomingMailServerNull() {
                this[this.tableMailAccounts.IncomingMailServerColumn] = System.Convert.DBNull;
            }
            
            public bool IsInPasswordNull() {
                return this.IsNull(this.tableMailAccounts.InPasswordColumn);
            }
            
            public void SetInPasswordNull() {
                this[this.tableMailAccounts.InPasswordColumn] = System.Convert.DBNull;
            }
            
            public bool IsInPortNull() {
                return this.IsNull(this.tableMailAccounts.InPortColumn);
            }
            
            public void SetInPortNull() {
                this[this.tableMailAccounts.InPortColumn] = System.Convert.DBNull;
            }
            
            public bool IsInUserIDNull() {
                return this.IsNull(this.tableMailAccounts.InUserIDColumn);
            }
            
            public void SetInUserIDNull() {
                this[this.tableMailAccounts.InUserIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsIsLeaveMessageNull() {
                return this.IsNull(this.tableMailAccounts.IsLeaveMessageColumn);
            }
            
            public void SetIsLeaveMessageNull() {
                this[this.tableMailAccounts.IsLeaveMessageColumn] = System.Convert.DBNull;
            }
            
            public bool IsIsOutgoingAuthorizedNull() {
                return this.IsNull(this.tableMailAccounts.IsOutgoingAuthorizedColumn);
            }
            
            public void SetIsOutgoingAuthorizedNull() {
                this[this.tableMailAccounts.IsOutgoingAuthorizedColumn] = System.Convert.DBNull;
            }
            
            public bool IsIsTheSameWithIncomingNull() {
                return this.IsNull(this.tableMailAccounts.IsTheSameWithIncomingColumn);
            }
            
            public void SetIsTheSameWithIncomingNull() {
                this[this.tableMailAccounts.IsTheSameWithIncomingColumn] = System.Convert.DBNull;
            }
            
            public bool IsOutgoingMailServerNull() {
                return this.IsNull(this.tableMailAccounts.OutgoingMailServerColumn);
            }
            
            public void SetOutgoingMailServerNull() {
                this[this.tableMailAccounts.OutgoingMailServerColumn] = System.Convert.DBNull;
            }
            
            public bool IsOutPasswordNull() {
                return this.IsNull(this.tableMailAccounts.OutPasswordColumn);
            }
            
            public void SetOutPasswordNull() {
                this[this.tableMailAccounts.OutPasswordColumn] = System.Convert.DBNull;
            }
            
            public bool IsOutPortNull() {
                return this.IsNull(this.tableMailAccounts.OutPortColumn);
            }
            
            public void SetOutPortNull() {
                this[this.tableMailAccounts.OutPortColumn] = System.Convert.DBNull;
            }
            
            public bool IsOutUserIDNull() {
                return this.IsNull(this.tableMailAccounts.OutUserIDColumn);
            }
            
            public void SetOutUserIDNull() {
                this[this.tableMailAccounts.OutUserIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsServerTypeNull() {
                return this.IsNull(this.tableMailAccounts.ServerTypeColumn);
            }
            
            public void SetServerTypeNull() {
                this[this.tableMailAccounts.ServerTypeColumn] = System.Convert.DBNull;
            }
            
            public bool IsTypeNull() {
                return this.IsNull(this.tableMailAccounts.TypeColumn);
            }
            
            public void SetTypeNull() {
                this[this.tableMailAccounts.TypeColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class MailAccountsRowChangeEvent : EventArgs {
            
            private MailAccountsRow eventRow;
            
            private DataRowAction eventAction;
            
            public MailAccountsRowChangeEvent(MailAccountsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public MailAccountsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
